class Game {
    
    var allTeamsPlayer = [Player]() // Tableau (de type Player) contenant les 2 joueurs avec leur selection de personnages
    
    // Tableau (de type String) contenant l'ensemble des noms enregistr√©s (joueurs + personnages)
    var nameInformation = [String]()
    
    var maxPlayers = 2
    var maxCharacters = 3
    var turnNumber = 0
    var nextTeam = [1, 2]
    
    // Fonction permettant de faire fonctionner le logiciel. elle permet le lancement du jeu (apr√®s avoir instancier la class Game) √©tape par √©tape et chaque √©tape correspond √† une fonction diff√©rente
    func start() {
        presentGame()
        createTeamPlayer()
        recapitulatesTeams()
        battleRoundByRound()
        statistics()
    }
    
    func presentGame() { // fonction comprenant la 1er partie du jeu. C'est une introduction au jeu
        print("")
        print("""
            ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ üõ°Ô∏è  WAR OF HERES üõ°Ô∏è ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ
            
            Ceci est un jeu de combat √† 2 joueurs dont l'action se d√©roule au tour par
            tour. Chacun des joueurs doit constituer une √©quipe de 3 personnages afin
            de d√©marrer la partie.
                                                                                        
            Au cour du jeu, un coffre appara√Ætra de mani√®re all√©atoire et permettra √†
            l'un des joueurs d'obtenir une nouvelle arme !
                                                                                        
            La partie prend fin lorsque tous les personnages d'une √©quipe sont morts..
            A pr√©sent, pr√©parez-vous √† combattre et que le meilleur gagne ! ü§ù
                                                                                        
            ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ‚¨õ
            """)
    }
    // fonction comprenant la 2√®me partie du jeu. Elle permet la constitution des √©quipes de chaque joueur
    func createTeamPlayer() {
        for n in 0..<maxPlayers { // on lance une boucle sur la base de nos 2 joueurs
            print("\n‚û°Ô∏è  PLAYER \(n + 1) üéÆ") // √† chaque tour de boucle, on ajoute un joueur
            
            // cette constante permet de r√©cup√©rer la s√©lection des personnages des 2 joueurs. Chaque selection est contenu dans un tableau diff√©rent
            if let teams = createTeamCharacter() {
                
                // Les 2 joueurs enregistr√©s ainsi que leur selection respective sont ajout√©s au tableau "allTeamsPlayer"
                allTeamsPlayer.append(teams)
                
                teams.displayCharactersTeam() // on affiche les informations des personnages selectionn√©s pour chaque jours
            }
        }
    }
    
    // fonction cr√©ant un tableau pour chaque selection de chaque joueur √† destination du tableau allTeams par le renvoi de "player?"
    func createTeamCharacter() -> Player? {
        
        // playerName de la class "Player" permet d'attribuer un nom √† chaque joueur grace √† l'init "getNamePlayer" de celle-ci
        let playerName = Player(getNamePlayer: choisePlayerName())
        
        // constante permettant de r√©cuper les personnages selectionn√©s par le joueur. Cette selection se trouve dans un tableau provisoire (de type "[Character]") de la fonction "compositionTeam". "team" h√©rite donc du type [Character]
       if let team = composeTeam() {
        
        // allTeams appartient √† la class Player. playerName √©tantd de type "Player" nous permet l'acc√®s au tableau "allTeams" afin d'y ajouter la selection du joueur par le biais de la constante "team". "team" et "allTeams" sont tous deux des tableaux de type [Character]
        playerName.allTeams += team
        }
        return playerName // renvoi d'un type Player
    }

    func choiceUniqueName() -> String { // fonction compl√©mentaire pour les fonctions nom "Player" et nom "Personnage"
        var identity = ""
        repeat {
            if let choise = readLine() {
                identity = choise.lowercased()
                
            if nameInformation.contains(identity) {
                        print("Ce nom est d√©j√† utilis√© ! ‚úã‚õîü§ö")
                        identity = ""
                    } else {
                    nameInformation.append(identity)
                }
            }
            } while identity == ""
        return identity
    }
    
    func choiceCharacterName() -> String { // fonction pour cr√©er un nom de personnage
        print("")
        print("ü¶π Indiquez le nom de votre personnage :")
        let choiceCharacterName = choiceUniqueName()
        return choiceCharacterName
    }
    
    func choisePlayerName() -> String { // fonction pour cr√©er un nom de joueur
        print("")
        print("‚úçÔ∏è Entrer votre nom de joueur :")
 
        let choicePlayerName = choiceUniqueName()
        return choicePlayerName
    }
    
    // fonction permettant √† chaque joueur de selectionner des personnages pour constituer leur √©quipe
        func selectTeam() -> Character? {
            var userChoice = 0
            print("")
            print("composer votre √©quipe en choisissant 3 personnages"
                
                + "\n"
                + "\n1. üß≤ Warrior - ‚ù§Ô∏è  250 - ü§úüí• 10"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì‚Äì"
                + "\n2. üó° Knight  - ‚ù§Ô∏è  150 - ü§úüí• 30"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì"
                + "\n3. üèπ Elf     - ‚ù§Ô∏è  225 - ü§úüí• 15"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì"
                + "\n4. üí£ Fighter - ‚ù§Ô∏è  175 - ü§úüí• 25"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì"
                + "\n5. ü¶Ø Mage    - ‚ù§Ô∏è  150 - ü§úüí• 40"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì"
                + "\n6. ü™ì Peasant - ‚ù§Ô∏è  200 - ü§úüí• 20"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì")
            
            while userChoice != 1 && userChoice != 2 && userChoice != 3 && userChoice != 4 && userChoice != 5 && userChoice != 6 {
                if let information = readLine() { // Permet d'entrer les informations du joueur
                if let informationInt = Int(information) {
                    userChoice = informationInt
                } else {
                    print("Reponse non valide.")
                    print("Vous devez entrer un nombre entre 1 et 6 afin de valider votre choix")
                    }
                }
            }

                switch userChoice {
                case 1:
                    let warrior = Warrior(name: choiceCharacterName())
                    print("")
                    print("üß≤ \(warrior.name) au boomerang a √©t√© ajout√© üîµ")
                    return warrior
                case 2:
                    let knight = Knight(name: choiceCharacterName())
                    print("")
                    print("üó°  \(knight.name) √† l'√©p√©e a √©t√© ajout√© üü¢")
                    return knight
                case 3:
                    let elf = Elf(name: choiceCharacterName())
                    print("")
                    print("üèπ \(elf.name) √† l'arbal√®te a √©t√© ajout√© üü†")
                    return elf
                case 4:
                    let fighter = Fighter(name: choiceCharacterName())
                    print("")
                    print("üí£ \(fighter.name) aux bombes a √©t√© ajout√© üü£")
                    return fighter
                case 5:
                    let mage = Mage(name: choiceCharacterName())
                    print("")
                    print("ü¶Ø \(mage.name) au baton a √©t√© ajout√© üü§")
                    return mage
                case 6:
                    let peasant = Peasant(name: choiceCharacterName())
                    print("")
                    print("ü™ì \(peasant.name) √† la hache a √©t√© ajout√© üî¥")
                    return peasant
                    
                    default:
                    return nil
                }
                }
    
    // fonction permettant de receptionn√© les personnages choisis par le joueur. Les donn√©es (de type "Character") seront int√©gr√©s dans un tableau de type [Character]
    func composeTeam() -> [Character]? {
        
        var team = [Character]() // tableau provisoire pour receptionner les donn√©es du joueur
        
        for selection in 0..<maxCharacters { // s√©lection de 3 personnages
            
            // constante servant √† exploiter les donn√©es de la fonction selectTeam afin de les transf√©rer dans un tableau
            if let selection = selectTeam() {
                team.append(selection) // donn√©es transf√©rer dans le tableau provisoire

            }
            if selection == 0 {
                print("Il vous reste encore 2 personnages √† choisir")
                       }
            if selection == 1 {
                print("Il vous reste encore 1 personnage √† choisir")
                       }
            if selection == 2 {
                print("")
                print("‚è¨ Votre √©quipe est maintenant au complet ‚è¨")
                print("")
            }
        }
        return team
    }

    
    func presentNextTeam() {
        nextTeam.swapAt(0, 1)
        print("üë§ C'est au tour de l'√©quipe \(nextTeam[0])")

        }
    
    func recapitulatesTeams() { // r√©capitulatif des 2 √©quipes au complet
        print("")
        print("\nüî• VOICI LES 2 EQUIPES QUI VONT S'AFFRONTER üî•")
        print("")
        print("")
        print("üê≤ EQUIPE JOUEUR 1")
            allTeamsPlayer[0].displayCharactersTeam()
        print("")
        print("")
        print("üê≤ EQUIPE JOUEUR 2")
            allTeamsPlayer[1].displayCharactersTeam()
        print("")
    }
    
    func changeTeamsPlayer() { // fonction permettant de changer d'√©quipe
        allTeamsPlayer.swapAt(0, 1)
        
    }
                
    // fonction pour choisir le personnage de son √©quipe (pour joueur et soigner) ainsi que le personnage de l'√©quipe adversaire (pour attaquer)
    func selectCharacterPlayer() -> Character {
        
        var choiceCharacterPlayer: Character?
        var choicePlayer = 0
            while choicePlayer != 1 && choicePlayer != 2 && choicePlayer != 3 && choicePlayer != 4 && choicePlayer != 5 && choicePlayer != 6 {
                if let information = readLine() { // Permet d'entrer les informations du joueur
                if let informationInt = Int(information) {
                    choicePlayer = informationInt
                } else {
                    print("Reponse non valide.")
                    print("Vous devez entrer un nombre entre 1 et 3 afin de valider votre choix")
                    }
                }
            }
                switch choicePlayer {
                case 1:
                choiceCharacterPlayer = allTeamsPlayer[0].allTeams[0]
                case 2:
                choiceCharacterPlayer = allTeamsPlayer[0].allTeams[1]
                case 3:
                choiceCharacterPlayer = allTeamsPlayer[0].allTeams[2]
                default:
                    break
                }
                if let choiceCharacter = choiceCharacterPlayer {
                    if choiceCharacter.hp == 0 {
                        print("""
                        Ce personnage est mort ! üíÄ
                        Choisissez un autre √©quipier..
                        """)
                        _ = selectCharacterPlayer()
                    }
                }
        return choiceCharacterPlayer!
    }

    func appearSafe() -> Bool { // fonction permettant de d√©clencher l'apparition d'un coffre contenant deux armes sp√©ciales
        var appearSafe = true
        let getSafe = Int.random(in: 1...6)
        if getSafe == 3 {
            appearSafe = false
            print("")
            print("Vous avez trouvez un coffre ! üéÅ")
            print("choisissez une nouvelle capacit√© ‚≠ê"
                
                + "\n"
                + "\n1. Utiliser la super potion üß™ - ‚ù§Ô∏è 100"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì‚Äì‚Äî‚Äî‚Äî‚Äî"
                + "\n2. Foudroyer votre adversaire ‚ö° - üí• 100"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
            
        } else {
            
            print("Que voulez-vous faire ü§î"
            
                + "\n"
                + "\n1. Soigner un √©quipier ‚ù§Ô∏è"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî"
                + "\n2. Attaquer le camp adverse ‚öîÔ∏è"
                + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî")
            
                    }
                    return appearSafe
            }

    
    func battleRoundByRound() { // fonction permettant l'interraction entre les 2 √©quipes au tour par tour
        
        print("PREPAREZ-VOUS A COMBATTRE !!! üëä")
        print("üê≤ EQUIPE 1 commence la partie ‚òùÔ∏è A la fin de l'action, c'est au tour de üê≤ EQUIPE 2 de jouer ‚úåÔ∏è")
        print("Le jeu se d√©roule au tour par tour üîÑ et prends fin lorsqu'une des 2 √©quipes meurt ‚ò†Ô∏è ")
        print("")
        repeat {
        allTeamsPlayer[0].displayCharactersTeam()
        print("")
        print("CHOISISSEZ UN COMBATTANT DANS VOTRE EQUIPE (üëâ Saisissez le chiffre 1Ô∏è‚É£,2Ô∏è‚É£ ou 3Ô∏è‚É£ üëà)")
        let choiceCharacterPlayer = selectCharacterPlayer()
            let attackOrHealSuper = appearSafe()
        var userChoice = 0
        while userChoice != 1 && userChoice != 2 {
            if let information = readLine() { // Permet d'entrer les informations du joueur
            if let informationInt = Int(information) {
                userChoice = informationInt
            } else {
                print("Reponse non valide.")
                print("Vous devez entrer le nombre 1 ou 2 pour valider votre choix")
                }
            }
        }
            switch userChoice {
            case 1:
                allTeamsPlayer[0].displayCharactersTeam()
                print("Choisissez l'√©quipier que vous d√©sirez soigner ü§ï (üëâ Saisissez le chiffre 1Ô∏è‚É£,2Ô∏è‚É£ ou 3Ô∏è‚É£ üëà)")
                if attackOrHealSuper == true {
                let healCharacter = selectCharacterPlayer()
                    print("Votre √©quipier √† bien √©t√© soign√© üëåü§ó")
                    print("")
                choiceCharacterPlayer.care(restore: healCharacter)
                    turnNumber += 1
                    changeTeamsPlayer()
                    print("Nombre de tours: \(turnNumber)")
                    print("")
                    presentNextTeam()
                    print("")
                } else if attackOrHealSuper == false {
                    let healCharacter = selectCharacterPlayer()
                    print("Votre √©quipier est comme neuf ‚úåÔ∏èüòé")
                    print("")
                    choiceCharacterPlayer.superCare(restore: healCharacter)
                turnNumber += 1
                print("Nombre de tours: \(turnNumber)")
                    print("")
                    presentNextTeam()
                print("")
                }
            case 2:
                allTeamsPlayer[1].displayCharactersTeam()
                print("Choisissez votre adversaire ‚ö†Ô∏è (üëâ Saisissez le chiffre 1Ô∏è‚É£,2Ô∏è‚É£ ou 3Ô∏è‚É£ üëà)")
                changeTeamsPlayer()
                    if attackOrHealSuper == true {
                        let attackCharacterOpposing = selectCharacterPlayer()
                        print("üí´üí•üí• ü§Æ‚ÄºÔ∏è")
                        print("Votre adversaire est touch√© üò´")
                choiceCharacterPlayer.hitPoint(damage: attackCharacterOpposing)
                choiceCharacterPlayer.increaseCare(increase: choiceCharacterPlayer)
                        turnNumber += 1
                        print("Nombre de tours: \(turnNumber)")
                        print("")
                        presentNextTeam()
                        print("")
                    } else if attackOrHealSuper == false {
                        let attackCharacterOpposing = selectCharacterPlayer()
                        print("üí´üí•üí•üí•üí• ü§Æ‚ÄºÔ∏è")
                        print("Superbe attaque ‚ÄºÔ∏è üòµ")
                        choiceCharacterPlayer.superHitPoint(damage: attackCharacterOpposing)
                        choiceCharacterPlayer.increaseCare(increase: choiceCharacterPlayer)
                turnNumber += 1
                print("Nombre de tours: \(turnNumber)")
                        print("")
                        presentNextTeam()
                print("")
                }
            default:
                break
            }

            } while finishTheGame()

            }
    
    
    func finishTheGame() -> Bool { // fonction mettant fin √† la partie lorsqu'une des 2 √©quipes √† perdu
        let killTeam = false
        for i in 0..<allTeamsPlayer.count {
            let team1 = allTeamsPlayer[i]
            let team2 = allTeamsPlayer[i+1]
            if team1.isDead() {
                winMessage(teamName: team2.getNamePlayer)
                return killTeam == true
            } else if team2.isDead() {
                winMessage(teamName: team1.getNamePlayer)
                return killTeam == true
            } else {
                return killTeam == false
            }
        }
        return killTeam
    }
    
    func winMessage(teamName: String) { // fonction emettant un message √† l'√©quipe gagnante
        print("Victoire √† l'√©quipe \(teamName), congratulation ‚ú®üëë‚ú®")
    }
    func statistics() { // fonction affichant les statistiques du jeu √† la fin de la partie
        print(""
            + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì‚Äî‚Äî‚Äî‚Äî"
            + "\n - Nombre de tours dans le jeu : \(turnNumber)"
            + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì‚Äî‚Äî‚Äî‚Äî"
            + "\n - Liste des personnages des 2 √©quipes"
            + "\n‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äì‚Äì‚Äî‚Äî‚Äî‚Äî"
            + "\n")
        allTeamsPlayer[0].displayCharactersTeam()
        allTeamsPlayer[1].displayCharactersTeam()

    }
}
